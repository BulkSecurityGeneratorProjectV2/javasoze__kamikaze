package com.kamikaze.luceneCodec.test;

import org.apache.lucene.util.LuceneTestCase;
import org.apache.lucene.store.*;
import org.apache.lucene.index.codecs.PForDeltaFixedIntBlockCodec;
import org.apache.lucene.index.codecs.sep.*;

public class TestPForDeltaFixedIntBlockCodec extends LuceneTestCase {

	  public void testPForDeltaSimpleIntBlocks() throws Exception {
	    Directory dir = newDirectory();
	    int blockSize = 128;
	    IntStreamFactory f = new PForDeltaFixedIntBlockCodec(blockSize).getIntFactory();
	    int testDataSize = 212402;
	    int[] testData = new int[testDataSize];
	    for(int i=0; i<testDataSize; ++i)
	    {
	      testData[i] = i*10 + i;
	    }
	    
	    IntIndexOutput out = f.createOutput(dir, "test");
	    for(int i=0;i<testDataSize;i++) {
	      out.write(testData[i]);
	    }
	    out.close();

	    System.out.println("start to read");
	    IntIndexInput in = f.openInput(dir, "test");
	    IntIndexInput.Reader r = in.reader();

	    for(int i=0;i<testDataSize;i++) {
	      int next = r.next();
	      assertEquals(testData[i], next);
	    }
	    in.close();
	    
	    dir.close();
	  }

	  public void testPForDeltaEmptySimpleIntBlocks() throws Exception {
	    Directory dir = newDirectory();

	    IntStreamFactory f = new PForDeltaFixedIntBlockCodec(128).getIntFactory();
	    IntIndexOutput out = f.createOutput(dir, "test");

	    // write no ints
	    out.close();

	    IntIndexInput in = f.openInput(dir, "test");
	    in.reader();
	    // read no ints
	    in.close();
	    dir.close();
	  }
	}
