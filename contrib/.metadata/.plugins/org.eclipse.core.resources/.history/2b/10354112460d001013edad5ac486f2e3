package com.kamikaze.luceneCodec.test;

import static org.junit.Assert.assertEquals;

import java.io.File;

import org.apache.lucene.index.codecs.sep.IntIndexInput;
import org.apache.lucene.index.codecs.sep.IntIndexOutput;
import org.apache.lucene.index.codecs.sep.IntStreamFactory;
import org.apache.lucene.store.Directory;

import com.kamikaze.lucencecodec.PForDeltaFixedIntBlockCodec;

public class TestCodec  {
	public void testPForDeltaSimpleIntBlocks() throws Exception {
	    Directory dir = newDirectory();
	    int blockSize = 128;
	    IntStreamFactory f = new PForDeltaFixedIntBlockCodec(blockSize).getIntFactory();
	    int testDataSize = 212402;
	    int[] testData = new int[testDataSize];
	    for(int i=0; i<testDataSize; ++i)
	    {
	      testData[i] = i*10 + i;
	    }
	    
	    IntIndexOutput out = f.createOutput(dir, "test");
	    for(int i=0;i<testDataSize;i++) {
	      out.write(testData[i]);
	    }
	    out.close();

	    System.out.println("start to read");
	    IntIndexInput in = f.openInput(dir, "test");
	    IntIndexInput.Reader r = in.reader();

	    for(int i=0;i<testDataSize;i++) {
	      int next = r.next();
	      assertEquals(testData[i], next);
	    }
	    in.close();
	    
	    dir.close();
	  }
	
	protected static File getIdxDir()
	  {
	    File fixDir = new File(System.getProperty("java.io.tmpdir"));
	    if(tempFile.exists())
	    {
	      if (i>10)
	      {
	        log.info("cannot delete");
	        return tempFile;
	      }
	      deleteDirectory(tempFile);
//	      tempFile.delete();
	      try
	      {
	        Thread.sleep(50);
	      } catch(Exception e)
	      {
	        log.error("thread interrupted in sleep in deleting file" + e);
	      }
	      i++;
	    }
	    return tempFile;
	  }
}
